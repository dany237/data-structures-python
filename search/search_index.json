{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Data Structures Documentation","text":""},{"location":"#1-array","title":"1. Array","text":"<p>An array is a collection of elements stored in contiguous memory locations. - Operations: Access, Insert, Delete, Search - Complexity:   - Access: O(1)   - Search: O(n) (unsorted), O(log n) (sorted)   - Insert/Delete: O(n) (worst case)</p>"},{"location":"#2-linked-list","title":"2. Linked List","text":"<p>A linked list is a linear data structure where elements (nodes) are connected via pointers. - Types:   - Singly Linked List   - Doubly Linked List   - Circular Linked List - Operations: Insert, Delete, Search, Traverse - Complexity:   - Insert/Delete: O(1) (at head), O(n) (at tail)   - Search: O(n)</p>"},{"location":"#3-circular-linked-list","title":"3. Circular Linked List","text":"<p>A circular linked list is a variation where the last node points back to the first node. - Advantages: Efficient traversal, useful in scheduling applications. - Complexity: Similar to a singly linked list.</p>"},{"location":"#4-doubly-linked-list","title":"4. Doubly Linked List","text":"<p>A doubly linked list has nodes with pointers to both previous and next nodes. - Advantages: Easier traversal in both directions. - Complexity: Similar to a singly linked list.</p>"},{"location":"#5-stack","title":"5. Stack","text":"<p>A stack follows the Last In, First Out (LIFO) principle. - Operations:   - Push (Insert)   - Pop (Remove)   - Peek (View top element) - Complexity:   - Push/Pop: O(1)</p>"},{"location":"#6-queue","title":"6. Queue","text":"<p>A queue follows the First In, First Out (FIFO) principle. - Types:   - Simple Queue   - Circular Queue   - Priority Queue - Operations:   - Enqueue (Insert)   - Dequeue (Remove) - Complexity:   - Enqueue/Dequeue: O(1)</p>"},{"location":"#7-graph","title":"7. Graph","text":"<p>A graph consists of nodes (vertices) connected by edges. - Types:   - Directed Graph   - Undirected Graph   - Weighted Graph - Representation:   - Adjacency Matrix   - Adjacency List - Complexity:   - Traversal (DFS/BFS): O(V + E)</p>"},{"location":"#8-tree","title":"8. Tree","text":"<p>A tree is a hierarchical data structure with a root node. - Types:   - Binary Tree   - Binary Search Tree (BST)   - AVL Tree   - B-Trees - Operations:   - Insert, Delete, Search, Traverse - Complexity:   - Search (BST): O(log n)   - Insert/Delete: O(log n)</p>"},{"location":"#conclusion","title":"Conclusion","text":"<p>These data structures form the foundation of computer science and are widely used in algorithms and applications.</p>"}]}